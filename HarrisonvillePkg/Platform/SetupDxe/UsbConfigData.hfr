//
// This file contains an 'Intel Peripheral Driver' and is
// licensed for Intel CPUs and chipsets under the terms of your
// license agreement with Intel or your vendor.  This file may
// be modified by the user, subject to additional terms of the
// license agreement
//
// /*++
// Copyright (c) 2009-2015 Intel Corporation. All rights reserved.
// This software and associated documentation (if any) is furnished
// under a license and may only be used or copied in accordance
// with the terms of the license. Except as permitted by such
// license, no part of this software or documentation may be
// reproduced, stored in a retrieval system, or transmitted in any
// form or by any means without the express written consent of
// Intel Corporation.
// --*/



//**********************************************************************
//                ADVANCED - USB Configuration Form
//**********************************************************************

  //
  // USB Configuration Form
  //

  form formid = VFR_FORMID_USB,

    title    = STRING_TOKEN(STR_USB_CONFIGURATION);
    subtitle text = STRING_TOKEN(STR_USB_CONFIGURATION);
    text
    help   = STRING_TOKEN(STR_EMPTY_STRING),
    text   = STRING_TOKEN(STR_USB_DEVICES_ENABLED),
    text   = STRING_TOKEN(STR_EMPTY_STRING),
    flags  = 0,
    key    = 0;

    subtitle text = STRING_TOKEN(STR_USB_DEVICES_ENABLED_LIST);

    oneof varid     = SYSTEM_CONFIGURATION.UsbMainSupport,
        prompt      = STRING_TOKEN(STR_USB_SUPPORT),
        help        = STRING_TOKEN(STR_USB_SUPPORT_HELP),
        option text = STRING_TOKEN(STR_USB_DISABLED),	value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_USB_ENABLED),	value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid     = SYSTEM_CONFIGURATION.UsbIoPm,
        prompt      = STRING_TOKEN(STR_USB_IO_PM_SUPPORT),
        help        = STRING_TOKEN(STR_USB_IO_PM_SUPPORT_HELP),
        option text = STRING_TOKEN(STR_USB_DISABLED),	value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_USB_ENABLED),	value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;


    oneof varid   = SYSTEM_CONFIGURATION.UsbPrecondition,
      prompt      = STRING_TOKEN(STR_USB_PRECONDITION_SUPPORT),
      help        = STRING_TOKEN(STR_USB_PRECONDITION_SUPPORT_HELP),
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
    endoneof;

    oneof varid     = SYSTEM_CONFIGURATION.PchUsb30Mode,
        prompt      = STRING_TOKEN(STR_PCH_USB30_MODE_PROMPT),
        help        = STRING_TOKEN(STR_PCH_USB30_MODE_HELP),
        option text = STRING_TOKEN(STR_ENABLED_STRING), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_DISABLED_STRING), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_MANUAL_STRING), value = 4, flags = RESET_REQUIRED;
    endoneof;

    suppressif ideqval SYSTEM_CONFIGURATION.PchUsb30Mode == 0x1;
      oneof varid   = SYSTEM_CONFIGURATION.Btcg,
        prompt      = STRING_TOKEN(STR_USB_BTCG_SUPPORT),
        help        = STRING_TOKEN(STR_USB_BTCG_SUPPORT_HELP),
        option text = STRING_TOKEN(STR_ENABLED_STRING), value = 1, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_DISABLED_STRING), value = 0, flags = RESET_REQUIRED;
      endoneof;
    endif; //suppressif ideqval SYSTEM_CONFIGURATION.PchUsb30Mode == 0x1

    suppressif NOT ideqval SYSTEM_CONFIGURATION.PchUsb30Mode == 0x4;
      subtitle text = STRING_TOKEN(STR_NULL_STRING);
      oneof varid   = SYSTEM_CONFIGURATION.UsbXhciSupport,
        prompt      = STRING_TOKEN(STR_USB_XHCI_SUPPORT),
        help        = STRING_TOKEN(STR_USB_XHCI_SUPPORT_HELP),
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
      endoneof;
      subtitle text = STRING_TOKEN(STR_NULL_STRING);
    endif; //suppressif NOT ideqval SYSTEM_CONFIGURATION.PchUsb30Mode == 0x4;

    suppressif NOT ideqval SYSTEM_CONFIGURATION.PchUsb30Mode == 0x4;
	  subtitle text = STRING_TOKEN(STR_NULL_STRING);
      oneof varid   = SYSTEM_CONFIGURATION.Usb3PinsTermination,
        prompt      = STRING_TOKEN(STR_PCH_ENABLE_USB3_PIN_PROMPT),
        help        = STRING_TOKEN(STR_EMPTY_STRING),
        option text = STRING_TOKEN(STR_PCH_SELECT_PER_PIN_PROMPT), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_DISABLE_ALL_PIN_STRING   ), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLE_ALL_PIN_STRING    ), value = 2, flags = RESET_REQUIRED;
      endoneof;
    endif; //suppressif NOT ideqval SYSTEM_CONFIGURATION.PchUsb30Mode == 0x4;

    suppressif ideqval SYSTEM_CONFIGURATION.Usb3PinsTermination == 0x1 OR
               ideqval SYSTEM_CONFIGURATION.Usb3PinsTermination == 0x2 OR
               ideqval SYSTEM_CONFIGURATION.PchUsb30Mode == 0x0 OR
               ideqval SYSTEM_CONFIGURATION.PchUsb30Mode == 0x1;

      oneof varid   = SYSTEM_CONFIGURATION.EnableUsb3Pin1,
        prompt      = STRING_TOKEN(STR_PCH_USB3_PIN1_PROMPT),
        help        = STRING_TOKEN(STR_EMPTY_STRING),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED ), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SYSTEM_CONFIGURATION.EnableUsb3Pin2,
        prompt      = STRING_TOKEN(STR_PCH_USB3_PIN2_PROMPT),
        help        = STRING_TOKEN(STR_EMPTY_STRING),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED ), value = 1, flags = RESET_REQUIRED;
      endoneof;

    oneof varid   = SYSTEM_CONFIGURATION.EnableUsb3Pin3,
      prompt      = STRING_TOKEN(STR_PCH_USB3_PIN3_PROMPT),
      help        = STRING_TOKEN(STR_EMPTY_STRING),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED ), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SYSTEM_CONFIGURATION.EnableUsb3Pin4,
      prompt      = STRING_TOKEN(STR_PCH_USB3_PIN4_PROMPT),
      help        = STRING_TOKEN(STR_EMPTY_STRING),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED ), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SYSTEM_CONFIGURATION.EnableUsb3Pin5,
      prompt      = STRING_TOKEN(STR_PCH_USB3_PIN5_PROMPT),
      help        = STRING_TOKEN(STR_EMPTY_STRING),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED ), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SYSTEM_CONFIGURATION.EnableUsb3Pin6,
      prompt      = STRING_TOKEN(STR_PCH_USB3_PIN6_PROMPT),
      help        = STRING_TOKEN(STR_EMPTY_STRING),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED ), value = 1, flags = RESET_REQUIRED;
    endoneof;

    endif; //suppressif ideqval SYSTEM_CONFIGURATION.Usb3PinsTermination......

    subtitle text = STRING_TOKEN(STR_NULL_STRING);

    //
    // Usb ports per-port disable control enable
    //
    oneof varid  = SYSTEM_CONFIGURATION.PchUsbPerPortCtl,
      prompt   = STRING_TOKEN(STR_PCH_USB_PER_PORT_PROMPT),
      help     = STRING_TOKEN(STR_PCH_USB_PER_PORT_HELP),
           option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED; 
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
    endoneof;

    suppressif ideqval SYSTEM_CONFIGURATION.PchUsbPerPortCtl == 0x0;
    
    oneof varid  = SYSTEM_CONFIGURATION.PchUsbPort[0],
      prompt   = STRING_TOKEN(STR_PCH_USB_PORT0_PROMPT),
      help     = STRING_TOKEN(STR_PCH_USB_PORT_DIS_HELP),
      option text = STRING_TOKEN(STR_DISABLED_USB2_USB3), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_DISABLED_USB2), value = 2, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_DISABLED_USB3), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 3, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;
    oneof varid  = SYSTEM_CONFIGURATION.PchUsbPort[1],
      prompt   = STRING_TOKEN(STR_PCH_USB_PORT1_PROMPT),
      help     = STRING_TOKEN(STR_PCH_USB_PORT_DIS_HELP),
      option text = STRING_TOKEN(STR_DISABLED_USB2_USB3), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_DISABLED_USB2), value = 2, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_DISABLED_USB3), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 3, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;
    oneof varid  = SYSTEM_CONFIGURATION.PchUsbPort[2],
      prompt   = STRING_TOKEN(STR_PCH_USB_PORT2_PROMPT),
      help     = STRING_TOKEN(STR_PCH_USB_PORT_DIS_HELP),
      option text = STRING_TOKEN(STR_DISABLED_USB2_USB3), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_DISABLED_USB2), value = 2, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_DISABLED_USB3), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 3, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;
    oneof varid  = SYSTEM_CONFIGURATION.PchUsbPort[3],
      prompt   = STRING_TOKEN(STR_PCH_USB_PORT3_PROMPT),
      help     = STRING_TOKEN(STR_PCH_USB_PORT_DIS_HELP),
      option text = STRING_TOKEN(STR_DISABLED_USB2_USB3), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_DISABLED_USB2), value = 2, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_DISABLED_USB3), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 3, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;
    oneof varid  = SYSTEM_CONFIGURATION.PchUsbPort[4],
      prompt   = STRING_TOKEN(STR_PCH_USB_PORT4_PROMPT),
      help     = STRING_TOKEN(STR_PCH_USB_PORT_DIS_HELP),
      option text = STRING_TOKEN(STR_DISABLED_USB2_USB3), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_DISABLED_USB2), value = 2, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_DISABLED_USB3), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 3, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;
    oneof varid  = SYSTEM_CONFIGURATION.PchUsbPort[5],
      prompt   = STRING_TOKEN(STR_PCH_USB_PORT5_PROMPT),
      help     = STRING_TOKEN(STR_PCH_USB_PORT_DIS_HELP),
      option text = STRING_TOKEN(STR_DISABLED_USB2_USB3), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_DISABLED_USB2), value = 2, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_DISABLED_USB3), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 3, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;
    oneof varid  = SYSTEM_CONFIGURATION.PchUsbPort[6],
      prompt   = STRING_TOKEN(STR_PCH_USB_PORT6_PROMPT),
      help     = STRING_TOKEN(STR_PCH_USB_PORT_DIS_HELP),
      option text = STRING_TOKEN(STR_DISABLED_USB2), value = 2, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 3, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;
    oneof varid  = SYSTEM_CONFIGURATION.PchUsbPort[7],
      prompt   = STRING_TOKEN(STR_PCH_USB_PORT7_PROMPT),
      help     = STRING_TOKEN(STR_PCH_USB_PORT_DIS_HELP),
      option text = STRING_TOKEN(STR_DISABLED_USB2), value = 2, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 3, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;
   endif;
  endform;
